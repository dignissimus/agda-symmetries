@inproceedings{10.1145/2364394.2364405,
author = {Hinze, Ralf and James, Daniel W.H. and Harper, Thomas and Wu, Nicolas and Magalh\~{a}es, Jos\'{e} Pedro},
title = {Sorting with bialgebras and distributive laws},
year = {2012},
isbn = {9781450315760},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364394.2364405},
doi = {10.1145/2364394.2364405},
abstract = {Sorting algorithms are an intrinsic part of functional programming folklore as they exemplify algorithm design using folds and unfolds. This has given rise to an informal notion of duality among sorting algorithms: insertion sorts are dual to selection sorts. Using bialgebras and distributive laws, we formalise this notion within a categorical setting. We use types as a guiding force in exposing the recursive structure of bubble, insertion, selection, quick, tree, and heap sorts. Moreover, we show how to distill the computational essence of these algorithms down to one-step operations that are expressed as natural transformations. From this vantage point, the duality is clear, and one side of the algorithmic coin will neatly lead us to the other "for free". As an optimisation, the approach is also extended to paramorphisms and apomorphisms, which allow for more efficient implementations of these algorithms than the corresponding folds and unfolds.},
booktitle = {Proceedings of the 8th ACM SIGPLAN Workshop on Generic Programming},
pages = {69–80},
numpages = {12},
keywords = {sorting, paramorphisms, distributive laws, category theory, bialgebras, apomorphisms, algorithm design},
location = {Copenhagen, Denmark},
series = {WGP '12}
}

@thesis{alexandru_intrinsically_2023,
        author = {Alexandru, G. C. (Cass)},
        title = {Intrinsically correct sorting using bialgebraic semantics},
        institution = {Radboud University},
        type = {mathesis},
        year = {2023},
        file = {https://www.ru.nl/publish/pages/769526/cass.pdf},
        url = {https://www.ru.nl/icis/education/master-thesis/vm/theses-archive/},
        }  

@article{appel2016verified,
  title={Verified Functional Algorithms},
  author={Appel, Andrew and others},
  journal={Software Foundations series},
  volume={3},
  year={2016}
}

@article{10.1145/3498667,
author = {Choudhury, Vikraman and Karwowski, Jacek and Sabry, Amr},
title = {Symmetries in reversible programming: from symmetric rig groupoids to reversible programming languages},
year = {2022},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {POPL},
url = {https://doi.org/10.1145/3498667},
doi = {10.1145/3498667},
abstract = {The Pi family of reversible programming languages for boolean circuits is presented as a syntax of combinators witnessing type isomorphisms of algebraic data types. In this paper, we give a denotational semantics for this language, using weak groupoids \`{a} la Homotopy Type Theory, and show how to derive an equational theory for it, presented by 2-combinators witnessing equivalences of type isomorphisms.  We establish a correspondence between the syntactic groupoid of the language and a formally presented univalent subuniverse of finite types. The correspondence relates 1-combinators to 1-paths, and 2-combinators to 2-paths in the universe, which is shown to be sound and complete for both levels, forming an equivalence of groupoids. We use this to establish a Curry-Howard-Lambek correspondence between Reversible Logic, Reversible Programming Languages, and Symmetric Rig Groupoids, by showing that the syntax of Pi is presented by the free symmetric rig groupoid, given by finite sets and bijections.  Using the formalisation of our results, we perform normalisation-by-evaluation, verification and synthesis of reversible logic gates, motivated by examples from quantum computing. We also show how to reason about and transfer theorems between different representations of reversible circuits.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {6},
numpages = {32},
keywords = {univalent foundations, type isomorphisms, rewriting, reversible programming languages, reversible computing, permutations, homotopy type theory, groups, groupoids}
}
@article{Choudhury_2023,
  title     = {Free Commutative Monoids in Homotopy Type Theory},
  volume    = {Volume 1-Proceedings of...},
  issn      = {2969-2431},
  doi       = {10.46298/entics.10492},
  journal   = {Electronic Notes in Theoretical Informatics and Computer Science},
  publisher = {Centre pour la Communication Scientifique Directe (CCSD)},
  author    = {Choudhury, Vikraman and Fiore, Marcelo},
  year      = {2023},
  month     = feb
}
@inproceedings{joram_et_al:LIPIcs.ITP.2023.20,
  author    = {Joram, Philipp and Veltri, Niccol\`{o}},
  title     = {{Constructive Final Semantics of Finite Bags}},
  booktitle = {14th International Conference on Interactive Theorem Proving (ITP 2023)},
  pages     = {20:1--20:19},
  series    = {Leibniz International Proceedings in Informatics (LIPIcs)},
  isbn      = {978-3-95977-284-6},
  issn      = {1868-8969},
  year      = {2023},
  volume    = {268},
  editor    = {Naumowicz, Adam and Thiemann, Ren\'{e}},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address   = {Dagstuhl, Germany},
  url       = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ITP.2023.20},
  urn       = {urn:nbn:de:0030-drops-183954},
  doi       = {10.4230/LIPIcs.ITP.2023.20},
  annote    = {Keywords: finite bags, final coalgebra, homotopy type theory, Cubical Agda}
}
@inproceedings{10.1007/978-981-99-8311-7_7,
  author    = {Kupke, Clemens and Forsberg, Fredrik Nordvall and Watters, Sean},
  title     = {A Fresh Look at Commutativity: Free Algebraic Structures via Fresh Lists},
  year      = {2023},
  isbn      = {978-981-99-8310-0},
  publisher = {Springer-Verlag},
  address   = {Berlin, Heidelberg},
  doi       = {10.1007/978-981-99-8311-7_7},
  abstract  = {We show how types of free idempotent commutative monoids and free commutative monoids can be constructed in ordinary dependent type theory, without the need for quotient types or setoids, and prove that these constructions realise finite sets and multisets, respectively. Both constructions arise as generalisations of C. Coquand’s data type of fresh lists. We also show how many other free structures also can be realised by other instantiations. All of our results have been formalised in Agda.},
  booktitle = {Programming Languages and Systems: 21st Asian Symposium, APLAS 2023, Taipei, Taiwan, November 26–29, 2023, Proceedings},
  pages     = {135–154},
  numpages  = {20},
  keywords  = {Free algebraic structures, Dependent Type theory},
  location  = {Taipei, Taiwan}
}

@article{Blass1983,
  author   = {Blass, Andreas},
  journal  = {Fundamenta Mathematicae},
  keywords = {axiom of choice; variety of algebras; coequalizers; free algebras; topos with natural numbers object; Boolean topos},
  language = {eng},
  number   = {2},
  pages    = {117-160},
  title    = {Words, free algebras, and coequalizers},
  url      = {http://eudml.org/doc/211359},
  volume   = {117},
  year     = {1983}
}


